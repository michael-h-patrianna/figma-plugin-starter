import { EventHandler } from '@create-figma-plugin/utilities';

// Generic types for Figma plugin starter


/**
 * Represents the severity level of an issue.
 *
 * - 'error': A critical problem that prevents operation.
 * - 'warning': A non-critical issue that may require user attention.
 * - 'info': Informational message or status.
 */
export type IssueLevel = 'error' | 'warning' | 'info';


/**
 * Describes an issue or message generated by plugin operations.
 *
 * @property code - Unique code identifying the issue type.
 * @property message - Human-readable description of the issue.
 * @property nodeId - (Optional) Associated Figma node ID, if relevant.
 * @property level - Severity level of the issue.
 */
export interface Issue {
  code: string;
  message: string;
  nodeId?: string;
  level: IssueLevel;
}


/**
 * Generic data structure for plugin operations.
 *
 * Used to store arbitrary key-value pairs for plugin-specific data.
 */
export interface PluginData {
  [key: string]: any;
}


/**
 * Result object returned from plugin operations (scan, process, etc).
 *
 * @property success - Whether the operation was successful.
 * @property data - (Optional) Data returned from the operation.
 * @property issues - (Optional) List of issues encountered.
 * @property message - (Optional) Human-readable status message.
 */
export interface OperationResult {
  success: boolean;
  data?: PluginData;
  issues?: Issue[];
  message?: string;
}


/**
 * Message handler for scan operations.
 *
 * @extends EventHandler
 * @property name - The message type ('SCAN').
 * @property handler - Function to handle the scan event.
 */
export interface ScanMessage extends EventHandler {
  name: 'SCAN';
  handler: () => void;
}

/**
 * Message handler for process operations.
 *
 * @extends EventHandler
 * @property name - The message type ('PROCESS').
 * @property handler - Function to handle the process event with plugin data.
 */
export interface ProcessMessage extends EventHandler {
  name: 'PROCESS';
  handler: (data: PluginData) => void;
}

/**
 * Message handler for resize operations.
 *
 * @extends EventHandler
 * @property name - The message type ('RESIZE').
 * @property handler - Function to handle the resize event with new dimensions.
 */
export interface ResizeMessage extends EventHandler {
  name: 'RESIZE';
  handler: (width: number, height: number) => void;
}
